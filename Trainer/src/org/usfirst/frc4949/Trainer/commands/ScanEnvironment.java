// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4949.Trainer.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc4949.Trainer.Logging;
import org.usfirst.frc4949.Trainer.Robot;

/**
 *
 */
public class ScanEnvironment extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double driveSpeed;
	private double distance;
	private double distanceMoved;
	private long startTimeMillis;
	private long currentTimeMillis;
	private double error;
	private double angle;
	private double xAxis;
	private double yAxis;
	private double zAxis;
	private final double kP = 1.0;
	private final double kPivot = 0.03;
	private final double kSpeedConv = 0.25;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ScanEnvironment() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	/*
    	 * Enable the pragma that we inserted into the thread to start processing
    	 * and then kick of the code for the visionThread.  The thread will keep
    	 * running until the robot is reset, but we will stop checking to see 
    	 * if it has found anything.
    	 */
    	Robot.camera.enableProcessing();
    	Robot.camera.initThreadToScanEnvironment();

    	Logging.consoleLog("Starting to Scan Environment.");
    	distance = 10000;
    	driveSpeed = 0.7;

    	error = 90.0;
    	startTimeMillis = System.currentTimeMillis();

    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        angle = Robot.camera.getTurn();  // get current heading deviation

    	if (Robot.hasEncoders) {
    		error = (distance - Robot.drive.getRightFrontEncoder().getDistance());
    	} else {
        	currentTimeMillis = System.currentTimeMillis();
        	distanceMoved = (currentTimeMillis - startTimeMillis) * driveSpeed * kSpeedConv;
    		error = distance - distanceMoved;
    	}
    	
        xAxis = 0;                       // push drive to target line, if known
        yAxis = driveSpeed * kP;         // push drive towards target
        zAxis = -angle * kPivot;         // push drive towards heading 0
        
		if (error >= 0) {
    		Logging.consoleLog("Calling simulateDrive().  Distance remaining: %.2f", error);
			Robot.drive.simulateDrive( xAxis, yAxis, zAxis, 0);
		}		
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (error <= 0) {
    		Logging.consoleLog("Expected area of target reached.");
    		return true;
    	}
    	else {
    		Logging.consoleLog("Distance remaining: %.2f", error);
    		return false;
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	/*
    	 * Tell the processing thread to stop handling the pipeline output.
    	 * This just cleans up the log, as the thread will remain running
    	 * until the robot code is reloaded.  This is unfortunate.
    	 */
    	Robot.camera.disableProcessing();
		Logging.consoleLog("Expected area of target reached.");
		// Robot.camera.disableProcessing();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
		Logging.consoleLog("Environment scan interrupted.");
    }
}
